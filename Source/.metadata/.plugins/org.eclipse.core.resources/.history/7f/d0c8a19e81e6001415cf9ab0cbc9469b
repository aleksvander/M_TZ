package ru.adnovotelnov.ejb;

import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateful;
import javax.ejb.Stateless;
import javax.ws.rs.CookieParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.QueryParam;

import model_JPA.Task;
import model_JPA.User;
import ru.adnovotelnov.ejb.dao.UserDaoEJB;

/**
 * Session Bean implementation class UserEJB
 */
@Stateless(name = "userEJB", mappedName = "ejb/userEJB")
public class UserEJB implements UserEJBLocal {

	@EJB(name = "userDaoEJB")
	private UserDaoEJB userDaoEJB;
	
	@Override
	public List<User> getAllUsers() {
		System.out.println("userDaoEJB " + userDaoEJB);
		try {
			return userDaoEJB.findAllEntities();
		} catch (Exception e) {
			System.out.println("Exception " + e);
		}
		System.out.println("users!" + "");
		return null;//userDaoEJB.findAllEntities();
	}

	//¬ыносим на уровень представлени€ в отдельный класс всю гребанную логику, тут лишь проводим операции с данными
	//»ли нет? ѕо сути то... тут надо определить есть ли такие данные, и если есть то банально вернуть их
	//≈сли нет завести новые
	@Override
	public boolean getOrCreateUser(@CookieParam("username") @DefaultValue("") String userName) {
		if (checkExistName(userName)) {
			return true;
		} else {
			try {
				User user = new User(userName);
				userDaoEJB.persist(user);
				return true;
			} catch (Exception e) {
				return false;
			}
		}
	}
	
	public boolean checkExistName(String custName) {
		if (userDaoEJB.findByName(custName).size() != 0) {
			return true;
		} else {
			return false;
		}
	}

	@Override
	public boolean setTaskForUser(@CookieParam("currenttask") @DefaultValue("") String currentTask) {
		List<Task> tsk = List<Task>;
		try {
			User user = new User(userName, currentTask);
			userDaoEJB.persist(user);
			return true;
		} catch (Exception e) {
			return false;
		}
	}
}
