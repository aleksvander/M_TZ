package ru.adnovotelnov.ejb;

import java.util.ArrayList; 
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Local;
import javax.ejb.Stateful;
import javax.ejb.Stateless;
import javax.ws.rs.CookieParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.QueryParam;

import com.google.gson.Gson;

import model_JPA.Task;
import model_JPA.User;
import ru.adnovotelnov.classes.ConverterObjToStrJSON;
import ru.adnovotelnov.ejb.dao.UserDaoEJB;

/**
 * @author Новотельнов А.Д.
 * @version 1.0
 * EJB Session Stateless
 * Класс реализующий логику работы с сущностью jpa / UserEJBDao.
 * Представляет методы для поиска / выборки / обновления / удаления - данных.
 */
@Stateless(name = "userEJB", mappedName = "ejb/userEJB")
public class UserEJB implements UserEJBLocal {

	@EJB(name = "userDaoEJB")
	private UserDaoEJB userDaoEJB;
	//@EJB(name = "taskEJB")
	//private TaskEJBLocal taskEJB;
	
	//Экземпляр класса - конвертер в JSON
	private ConverterObjToStrJSON<User> cvrt = new ConverterObjToStrJSON<User>();
	
	/**
	 * Получить всех пользователей
	 * @return List<String>
	 */
	@Override
	public List<String> getAllUsers() {
		try {
			return userDaoEJB.findAllEntities();
		} catch (Exception e) {
			System.out.println("Exception " + e);
			return null;
		}
	}

	/**
	 * Получить(найти) или создать и получить пользователя по имени - имя пользователя уникальное!
	 * @param userName - искомое/создаваемое имя
	 * @return String - формата JSON
	 */
	@Override
	public String getOrCreateUser(String userName) {
		System.out.println("userName by getCreateUser???" + userName);
		if (userName == null)
			return null;
		
		if (!checkExistAtName(userName)) {
			try {
				System.out.println("!!!");
				User user = new User(userName);
				userDaoEJB.persist(user);
			} catch (Exception e) {
				return null;
			}
		}
		System.out.println("!!!!!6");
		return cvrt.convertObjToStrUser(userDaoEJB.findByName(userName));
	}
	
	@Override
	public boolean checkExistName(String userName) {
		return checkExistAtName(userName);
	}
	
	private boolean checkExistAtName(String userName) {
		if (userDaoEJB.findByName(userName).size() != 0) {
			return true;
		} else {
			return false;
		}
	}
	
	/**
	 * Т.К. поле имя в таблице Юзверов уникальное, нет смысла реализовать доп логику... и отслеживать его на уровне UI - js..
	 * @param name
	 * @return
	 */
	private int getIdUser(String name) {
		List<User> lUser = userDaoEJB.findByName(name);
		if (lUser.size() != 0) {
			return lUser.get(0).getId();
		} else {
			return 0;
		}
	}

	@Override
	public int getUserIdByName(String name) {
		return getIdUser(name);
	}

	@Override
	public User findById(int id) {
		return userDaoEJB.findById(id);
	}

	@Override
	public List<User> getuser(String name) {
		return userDaoEJB.findByName(name);
	}
	
	
}
